begin
  require 'hirb'
  Hirb.enable :pager=>false
rescue LoadError
  # sudo gem install cldwalker-hirb --source http://gems.github.com
  puts "Error loading hirb. Please 'sudo gen install hirb' "
end

def clear
  system 'clear'
end

def change_log(stream)
  ActiveRecord::Base.logger = Logger.new(stream)
  ActiveRecord::Base.clear_reloadable_connections!
end

def show_log
  change_log(STDOUT)
end

def hide_log
  change_log(nil)
end

def me
  User.find_by_email("hello@aitor.is") ||
    User.find_by_email("aitor@linkingpaths.com") ||
    User.find_by_email("aitor.garcia@gmail.com")
end

def r
  reload!
end

module DatabaseHelpers
  extend self

  def tables
    Hirb::Console.render_output ActiveRecord::Base.connection.tables.map{|e|[e]},{
      :class   => Hirb::Helpers::AutoTable,
      :headers => %w<tables>,
    }
    true
  end

  def table(which)
    Hirb::Console.render_output ActiveRecord::Base.connection.columns(which).map{ |e|
      [e.name, e.type, e.sql_type, e.limit, e.default, e.scale, e.precision, e.primary, e.null]
    },{
      :class   => Hirb::Helpers::AutoTable,
      :headers => %w<name type sql_type limit default scale precision primary null>,
    }
    true
  end

  def counts
    Hirb::Console.render_output ActiveRecord::Base.connection.tables.map{|e|
      [e, ActiveRecord::Base.connection.select_value("SELECT COUNT(*) FROM #{e}")]
    },{
      :class   => Hirb::Helpers::AutoTable,
      :headers => %w<table count>,
    }
    true
  end
end
def db; DatabaseHelpers; end

if defined?(Rails::Console)
  load File.dirname(__FILE__) + '/.rails3rc'
else
  load File.dirname(__FILE__) + '/.rails2rc'
end

set_prompt
